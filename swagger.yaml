openapi: 3.0.0
info:
  title: Caravanas
  description: |-
    This is an api for managing a company that rents vans. You can register clients, and they can rent a van in a range of days generating a booking.
  termsOfService: http://swagger.io/terms/
  contact:
    email: uca.dss.caravanas@gmail.com
  license:
    name: Caravanas
    url: https://github.com/DavidLuna-coder/dss2022-2023-Caravanas
  version: 3.0.0

tags:
  - name: Client
    description: Manage clients
  - name: Booking
    description: Manage bookings
  - name: Van
    description: Manage vans


# CLIENTS #

paths:
  /clients/{PutId}:
    parameters:
      - name: PutId
        in: path
        description: ID of the client
        required: true
        schema:
          type: string
    put:
      tags:
        - Client
      summary: Update an existing client
      description: Update an existing client by Id
      operationId: updateClient
      requestBody:
        description: Update an existent client
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Due"
                email:
                  type: string
                  example: "johndue@gmail.com"
                phone:
                  type: string
                  example: "+34657865676"
        required: true
      responses:
        '200':
          description: The client is updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  PutId:
                    type: string
                    example: "001"
                  name:
                    type: string
                    example: "John"
                  lastName:
                    type: string
                    example: "Due"
                  email:
                    type: string
                    example: "johndue@gmail.com"
                  phone:
                    type: string
                    example: "+34657865676"   
        '404':
          description: Client not found

  /clients:
    post:
      tags:
        - Client
      summary: Add a new client
      description: Add a new client
      operationId: createClient
      requestBody:
        description: Create a new client
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Anna"
                lastName:
                  type: string
                  example: "Smith"
                email:
                  type: string
                  example: "annasmith@gmail.com"
                phone:
                  type: string
                  example: "+34596395045"
        required: true
      responses:
        '200':
          description: The client is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "002"
                  name:
                    type: string
                    example: "Anna"
                  lastName:
                    type: string
                    example: "Smith"
                  email:
                    type: string
                    example: "annasmith@gmail.com"
                  phone:
                    type: string
                    example: "+34596395045"     
        '404':
          description: Error creating client
      
  /clients/{GetId}:
    parameters:
      - name: GetId
        in: path
        description: ID of the client
        required: true
        schema:
          type: string
          example: "002"
    get:
      tags:
        - Client
      summary: Get a client by the id
      description: Get a client by the id
      operationId: getClientById
      responses:
        '200':
          description: The client is
          content:
            application/json:
              schema:
                type: object
                properties:
                  GetId:
                    type: string
                    example: "002"
                  name:
                    type: string
                    example: "Anna"
                  lastName:
                    type: string
                    example: "Smith"
                  email:
                    type: string
                    example: "annasmith@gmail.com"
                  phone:
                    type: string
                    example: "+34596395045"            
        '404':
          description: Client not found
          
  /allClients:
    get:
      tags:
        - Client
      summary: Get all the clients
      description: Get all the clients
      operationId: getClients
      responses:
        '200':
          description: The client is
          content:
            application/json:
              schema:
                type: object
                properties:
                  GetId:
                    type: string
                  name:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  phone:
                    type: string
              example:
                - GetId: "001"
                  name: "Anna"
                  lastName: "Smith"
                  email: "annasmith@gmail.com"
                  phone: "+34596395045"
                - GetId: "002"
                  name: "John"
                  lastName: "Due"
                  email: "johndue@gmail.com"
                  phone: "+34657865676"
        '404':
          description: Client not found
          
  /clients/{DeleteId}:
    parameters:
      - name: DeleteId
        in: path
        description: ID of the client
        required: true
        schema:
          type: string
          example: "002"
    delete:
      tags:
        - Client
      summary: Delete the client with that id
      description: Delete the client with that id
      operationId: deleteClient
      responses:
        '200':
          description: Client deleted

        '404':
          description: Client not found
          
          
# BOOKINGS #

  /bookings/{PutId}:
    parameters:
      - name: PutId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
    put:
      tags:
        - Booking
      summary: Update an existing booking
      description: Update an existing booking by Id
      operationId: putBooking
      requestBody:
        description: Update an existent booking
        content:
          application/json:
            schema:
              type: object
              properties:
                client:
                  type: string
                  example: "002"
                van:
                  type: string
                  example: "4958GBN"
                startDate:
                  type: string
                  example: "2024-02-01"
                endDate:
                  type: string
                  example: "2024-02-07 "     
        required: true
      responses:
        '200':
          description: The booking is updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  GetId:
                    type: string
                    example: "001"
                  client:
                    type: string
                    example: "002"
                  van:
                    type: string
                    example: "4958GBN"
                  startDate:
                    type: string
                    example: "2024-02-01"
                  endDate:
                    type: string
                    example: "2024-02-07 "    
        '404':
          description: Booking not found
          
  /bookings/{CheckinId}:
    parameters:
      - name: CheckinId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
    put:
      tags:
        - Booking
      summary: Check in an existing booking
      description: Check in an existing booking by the id
      operationId: checkInBooking
      responses:
        '200':
          description: The booking is checked in
        '404':
          description: Booking does not exist or Cannot check in booking right now
          
  /bookings/{CheckoutId}:
    parameters:
      - name: CheckoutId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
    put:
      tags:
        - Booking
      summary: Check out an existing booking
      description: Check out an existing booking by the id
      operationId: checkOutBooking
      responses:
        '200':
          description: The booking is checked out
        '404':
          description: Booking does not exist or Cannot check in booking right now
          
  /bookings:
    post:
      tags:
        - Booking
      summary: Creates a booking
      description: Creates a booking
      operationId: postBooking
      requestBody:
        description: Update an existent booking
        content:
          application/json:
            schema:
              type: object
              properties:
                client:
                  type: string
                  example: "002"
                van:
                  type: string
                  example: "4958GBN"
                startDate:
                  type: string
                  example: "2024-02-01"
                endDate:
                  type: string
                  example: "2024-02-07"      
        required: true
      responses:
        '200':
          description: The booking is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  GetId:
                    type: string
                    example: "001"
                  client:
                    type: string
                    example: "002"
                  van:
                    type: string
                    example: "4958GBN"
                  startDate:
                    type: string
                    example: "2024-02-01"
                  endDate:
                    type: string
                    example: "2024-02-07 "  
        '404':
          description: Invalid booking or Booking already exists
          
  /bookings/{CancelId}:
    parameters:
      - name: CancelId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
    post:
      tags:
        - Booking
      summary: Cancel a booking
      description: Cancel a booking
      operationId: cancelBooking
      responses:
        '200':
          description: The booking is canceled
        '404':
          description: Booking does not exist or Cannot cancel booking right now

  /bookings/{GetId}:
    parameters:
      - name: GetId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
          example: "001"
    get:
      tags:
        - Booking
      summary: Get a booking by the id
      description: Get a booking by the id
      operationId: getBooking
      responses:
        '200':
          description: The booking is
          content:
            application/json:
              schema:
                type: object
                properties:
                  GetId:
                    type: string
                    example: "001"
                  client:
                    type: string
                    example: "002"
                  van:
                    type: string
                    example: "4958GBN"
                  startDate:
                    type: string
                    example: "2024-02-01"
                  endDate:
                    type: string
                    example: "2024-02-07"            
        '404':
          description: Booking not found
          
  /allBookings:
    get:
      tags:
        - Booking
      summary: Get all the bookings
      description: Get all the bookings
      operationId: getBookings
      responses:
        '200':
          description: The booking are
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    GetId:
                      type: string
                    client:
                      type: string
                    van:
                      type: string
                    startDate:
                      type: string
                    endDate:
                      type: string
              example:
                - GetId: "001"
                  client: "002"
                  van: "4958GBN"
                  startDate: "2024-02-01"
                  endDate: "2024-02-07"
                - GetId: "002"
                  client: "003"
                  van: "4958GBN"
                  startDate: "2024-06-16"
                  endDate: "2024-06-20"
        '404':
          description: Booking not found
          
          
# VANS #

  /vans/{PutLicense}:
    parameters:
      - name: PutLicense
        in: path
        description: License of the van
        required: true
        schema:
          type: string
    put:
      tags:
        - Van
      summary: Update an existing van
      description: Update an existing van by Id
      operationId: updateVan
      requestBody:
        description: Update an existent van
        content:
          application/json:
            schema:
              type: object
              properties:
                PutLicense:
                  type: string
                  example:   "4958GBN"
                brand:
                  type: string
                  example:   "Toyota"
                model:
                  type: string
                  example:  "Corola"
                registration:
                  type: string
                  example: "2023-04-13"
                basePrice:
                  type: string
                  example: "100"
                vanModel:
                  type: string
                  example: "basic"    
        required: true
      responses:
        '200':
          description: The van is updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  license:
                    type: string
                    example:   "4958GBN"
                  brand:
                    type: string
                    example:   "Toyota"
                  model:
                    type: string
                    example:  "Corola"
                  registration:
                    type: string
                    example: "2023-04-13"
                  basePrice:
                    type: string
                    example: "100"
                  vanModel:
                    type: string
                    example: "basic"
        '404':
          description: Invalid van model
  
  /vans:
    post:
      tags:
        - Van
      summary: Creates a van
      description: Creates a van
      operationId: createVan
      requestBody:
        description: Creates a van
        content:
          application/json:
            schema:
              type: object
              properties:
                license:
                  type: string
                  example:   "4958GBN"
                brand:
                  type: string
                  example:   "Toyota"
                model:
                  type: string
                  example:  "Corola"
                registration:
                  type: string
                  example: "2023-04-13"
                basePrice:
                  type: string
                  example: "100"
                vanModel:
                  type: string
                  example: "basic"    
        required: true
      responses:
        '200':
          description: The van is updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  license:
                    type: string
                    example:   "4958GBN"
                  brand:
                    type: string
                    example:   "Toyota"
                  model:
                    type: string
                    example:  "Corola"
                  registration:
                    type: string
                    example: "2023-04-13"
                  basePrice:
                    type: string
                    example: "100"
                  vanModel:
                    type: string
                    example: "basic"
        '404':
          description: Invalid van model
          
  /vans/{GetLicense}:
    parameters:
      - name: GetLicense
        in: path
        description: License of the van
        example: "5960FCD"
        required: true
        schema:
          type: string
    get:
      tags:
        - Van
      summary: Get all the vans
      description: Get all the vans
      operationId: getVan
      responses:
        '200':
          description: The vans is
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    GetLicense:
                      type: string
                    brand:
                      type: string
                    model:
                      type: string
                    registration:
                      type: string
                    basePrice:
                      type: string
                    vanModel:
                      type: string
              example:
                - license: "5960FCD"
                  brand: "AstonMartin"
                  model: "Nano"
                  registration: "2023-04-13"
                  basePrice: "5000"
                  vanMode: "premium"
        '404':
          description: Van not found
          
  /allVans:
    get:
      tags:
        - Van
      summary: Get all the vans
      description: Get all the vans
      operationId: getVans
      responses:
        '200':
          description: The vans are
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    license:
                      type: string
                    brand:
                      type: string
                    model:
                      type: string
                    registration:
                      type: string
                    basePrice:
                      type: string
                    vanModel:
                      type: string
              example:
                - license: "5960FCD"
                  brand: "AstonMartin"
                  model: "Nano"
                  registration: "2023-04-13"
                  basePrice: "5000"
                  vanMode: "premium"
                - license: "4958GBN"
                  brand: "Toyota"
                  model: "Corola"
                  registration: "2023-04-13"
                  basePrice: "100"
                  vanMode: "basic"
        '404':
          description: Van not found
          
  /vans/{DeleteLicense}:
    parameters:
      - name: DeleteLicense
        in: path
        description: License of the van
        required: true
        schema:
          type: string
          example: "4958GBN"
    delete:
      tags:
        - Van
      summary: Delete the van with that id
      description: Delete the van with that id
      operationId: deleteVan
      responses:
        '200':
          description: Van deleted

        '404':
          description: Van not found
          
 
